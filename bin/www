#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('sistemas-entregas:server');
var path = require("path");
var http = require('http');
var https = require('https');
var mconfig = require('../lib/mconfig.js');
var files = require('fs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || mconfig.puerto);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server;


if ( process.env.USE_HTTPS == "false" ) {
  
  server = app.listen(port);
} else {
 
  server = https.createServer({
    key: files.readFileSync(path.join(__dirname, '..', 'ssl', 'sistema.key')),
    cert: files.readFileSync(path.join(__dirname, '..', 'ssl', 'sistema.crt'))
  }, app);
  server.listen(port);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'? 'Pipe ' + port : 'Port ' + port;

  
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr: 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
